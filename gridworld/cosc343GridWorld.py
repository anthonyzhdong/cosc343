import numpy as np
import matplotlib.pyplot as plt
import matplotlib.patches as patches
from matplotlib.patches import Arc, RegularPolygon
from matplotlib.offsetbox import OffsetImage, AnnotationBbox
import time
from numpy import radians as rad


class GridWorldEnvironment:

    def __init__(self, R=0):

        self.fh = None

        import os
        if os.path.exists('robot_sm.png'):
            self.image = plt.imread('robot_sm.png')
            print(self.image.tobytes())

        robot_image = b'\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xfe\xfe\xfe\x00\xf9\xf9\xf9\x06\xb6\xbe\xc0Xs\x88\x8d\xb7Sqy\xe9Ehq\xfeLr|\xffR{\x86\xffQz\x85\xffKpz\xffGir\xfeUrz\xe9v\x8a\x8f\xb6\xc9\xcd\xceB\xfa\xfa\xfb\x05\xfe\xfe\xfe\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xfe\xfe\xfe\x00\xfd\xfd\xfd\x02\x99\xa5\xa7uU\x81\x8c\xf5j\x9e\xad\xfek\xa0\xaf\xfek\xa0\xaf\xfek\xa0\xaf\xffk\xa0\xaf\xffk\xa0\xaf\xffk\xa0\xaf\xffk\xa0\xaf\xfek\xa0\xae\xfei\x9d\xac\xfeo\x91\x9a\xf3\xb7\xbe\xc0c\xfe\xfe\xfe\x00\xfe\xfe\xfe\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xfe\xfe\xfe\x00\xe7\xe9\xe9\x1a8^c\xe5Q\x88\x94\xfek\xa0\xaf\xffl\xa1\xb0\xffk\xa0\xaf\xffl\xa1\xb0\xffl\xa1\xb0\xffl\xa1\xb0\xffl\xa1\xb0\xffk\xa1\xb0\xffk\xa1\xb0\xffl\xa1\xb0\xff{\xa9\xb6\xfe\x84\x94\x99\xd6\xf2\xf3\xf3\x10\xfe\xfe\xfe\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xfe\xfe\xfe\x00\xfe\xfe\xfe\x00\xfe\xfe\xfe\x00\xfe\xfe\xfe\x00\xfe\xfe\xfe\x00\xfe\xfe\xfe\x00\xfe\xfe\xfe\x00\xfd\xfd\xfd\x01\x97\xa3\xa4w,bj\xfc\\\x92\x9f\xfek\xa0\xaf\xffk\x9f\xad\xffh\x9a\xa9\xffk\x9f\xae\xffk\xa0\xaf\xffk\xa0\xaf\xffk\xa0\xaf\xffi\x9d\xab\xffi\x9c\xaa\xffk\xa0\xaf\xffq\xa4\xb2\xfe\x93\xad\xb5\xf8\xc4\xc7\xc8J\xfe\xfe\xfe\x00\xff\xff\xff\x00\xfe\xfe\xfe\x00\xfe\xfe\xfe\x00\xfe\xfe\xfe\x00\xfe\xfe\xfe\x00\xfe\xfe\xfe\x00\xfe\xfe\xfe\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xfe\xfe\xfe\x00\xda\xdd\xde/\xbc\xc0\xc1[\xc0\xc5\xc6V\xe6\xe7\xe8 \xfa\xfa\xfa\x06\xfe\xfe\xfe\x00\xf5\xf6\xf6\x0bIbe\xd01kt\xfee\x9b\xa9\xffj\x9e\xac\xffPjp\xffCOE\xffSqy\xffk\x9f\xae\xffk\xa0\xaf\xffe\x94\xa1\xffFWU\xffDSN\xff`\x8a\x96\xffm\xa2\xb0\xff\x9a\xbb\xc5\xfe\x93\x9d\x9f\xa1\xfc\xfc\xfc\x02\xfe\xfe\xfe\x00\xf7\xf8\xf8\t\xdd\xe0\xe1.\xbd\xc2\xc3[\xbc\xc0\xc1[\xe1\xe3\xe4%\xfe\xfe\xfe\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xfe\xfe\xfe\x00\xfb\xfb\xfb\x04\x8f\x97\x9a\xb5\xc1\xd1\xdc\xfc\xbe\xce\xd9\xfb\xad\xbc\xc5\xea\x99\xa1\xa3\x94\xfb\xfc\xfc\x03\xe8\xea\xea\x187`e\xe7>w\x82\xfej\x9f\xae\xfff\x95\xa3\xffBM>\xffw\xa4\x18\xffCOF\xffh\x99\xa7\xffk\xa0\xaf\xffXy\x83\xffTi)\xffa~"\xffNfl\xffl\xa0\xaf\xff\x94\xb9\xc5\xfe\x87\x96\x9b\xda\xf0\xf1\xf1\x12\xf6\xf7\xf7\x0b\x94\xa1\xa4\xb0\xab\xbd\xc6\xf1\xbf\xcf\xdb\xfc\xbd\xcc\xd7\xfb\x9e\xa4\xa7\x92\xfd\xfd\xfd\x02\xfe\xfe\xfe\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xfe\xfe\xfe\x00\xed\xee\xef\x16\xa5\xb2\xb9\xe6\xdc\xee\xfc\xfe\xdc\xee\xfc\xff\xba\xdc\xe7\xfe{\x8e\x91\xbe\xb1\xb7\xb9n\x83\x8d\x90\xc4(W^\xfcL\x83\x8f\xfek\xa0\xaf\xffj\x9e\xac\xffPjp\xffGVJ\xffSqx\xffk\x9f\xae\xffk\xa0\xaf\xffe\x93\xa0\xffHZX\xffGWQ\xff`\x8a\x95\xffk\xa0\xaf\xff\x87\xb1\xbd\xfe\x82\x94\x99\xf8\x95\x9d\xa0\xb2\xbd\xc1\xc1`\x8b\xa3\xa7\xc0\xb0\xd9\xe4\xfe\xdb\xee\xfc\xff\xdb\xed\xfb\xfe\xa1\xab\xb1\xce\xf5\xf6\xf6\x0c\xfe\xfe\xfe\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xfe\xfe\xfe\x00\xc6\xc9\xcaN\xbf\xcf\xda\xf9\xdc\xee\xfc\xfe\xdb\xee\xfc\xff\xa0\xc6\xd0\xfe=EA\xf8z\x91\x97\xfb\xc8\xdb\xe7\xfeo\x83\x8b\xfeXv\x7f\xffa\x8a\x96\xffa\x8e\x9b\xffc\x92\xa0\xffc\x93\xa0\xffh\x9b\xa9\xffi\x9c\xab\xffi\x9d\xab\xffh\x9b\xaa\xffd\x94\xa1\xffb\x90\x9d\xffa\x8d\x9a\xffa\x88\x94\xffg\x80\x89\xff\x93\xa0\xa8\xfe\xda\xe6\xef\xfe\x87\x89\x88\xf6EQN\xf6\x9e\xcb\xd5\xfe\xd8\xec\xfa\xff\xdc\xee\xfc\xfe\xab\xb8\xc1\xf5\xd6\xd9\xda7\xfe\xfe\xfe\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xfd\xfd\xfd\x01\x90\x95\x94\x96\xba\xc6\xcb\xfe\xd2\xe2\xed\xff\xd5\xea\xf7\xffy\x99\x9e\xfe??1\xfe\x88\xb2\xb9\xfe\xb6\xdd\xe8\xff\xca\xe4\xf1\xff\xcd\xe0\xed\xff\xc4\xd6\xe2\xff\xb3\xc5\xcf\xff\x96\xa7\xb1\xff\x8a\x9b\xa4\xff\x80\x93\x9c\xffx\x8b\x94\xffy\x8c\x95\xff\x82\x94\x9d\xff\x8b\x9c\xa5\xff\x9b\xac\xb5\xff\xb6\xc8\xd3\xff\xc7\xd8\xe4\xff\xdb\xe8\xf2\xff\xf0\xf7\xfc\xff\xfc\xfd\xfe\xfe\xb8\xb7\xb6\xfeB@3\xfe\x87\xaf\xb6\xfe\xcd\xe6\xf3\xff\xd2\xe2\xec\xff\xb5\xc1\xc6\xfc\xb7\xb9\xb9`\xfe\xfe\xfe\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xfe\xfe\xfe\x00\xf7\xf7\xf7\t\x81\x87\x84\xc9\x92\x96\x8f\xfe\x9a\x9f\x99\xff\xb7\xcb\xcf\xffe}~\xffAD:\xff\x93\xc3\xcc\xff\x9e\xd2\xdc\xff\xa0\xd3\xdd\xff\xb8\xde\xe9\xff\xdc\xee\xfc\xff\xdc\xee\xfc\xff\xdc\xee\xfc\xff\xdc\xee\xfc\xff\xdb\xed\xfb\xff\xda\xec\xfa\xff\xda\xec\xfa\xff\xdb\xed\xfb\xff\xdc\xee\xfc\xff\xdc\xee\xfc\xff\xdc\xee\xfc\xff\xdd\xef\xfd\xff\xf5\xfa\xfe\xff\xfe\xfe\xfe\xff\xfe\xfe\xfe\xff\xdc\xdc\xdc\xffDA3\xffq\x92\x96\xff\xa3\xbd\xc0\xff\x99\x9e\x97\xff\x92\x96\x8f\xfe\x8f\x93\x92\xa5\xfb\xfb\xfb\x04\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xfe\xfe\xfe\x00\xe9\xe9\xe9\x1aqrj\xe4\x96\x9a\x93\xfe\x92\x95\x8d\xff\xb5\xd2\xd9\xfeZnl\xfeFRM\xfe\x9a\xcd\xd7\xfe\x9d\xd1\xdb\xff\x9e\xd2\xdc\xff\xb1\xda\xe5\xff\xdb\xee\xfc\xff\xdd\xef\xfd\xff\xdd\xef\xfd\xff\xdd\xef\xfd\xff\xdd\xef\xfd\xff\xdd\xef\xfd\xff\xdd\xef\xfd\xff\xdd\xef\xfd\xff\xdd\xef\xfd\xff\xdd\xef\xfd\xff\xdd\xef\xfd\xff\xde\xef\xfd\xff\xf7\xfb\xfe\xff\xfe\xfe\xfe\xff\xfe\xfe\xfe\xff\xf2\xf2\xf2\xffSPE\xffd\x7f\x81\xff\xa6\xca\xd0\xff\x90\x94\x8b\xff\x95\x9a\x93\xfegib\xdc\xf1\xf1\xf1\x11\xfe\xfe\xfe\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xfe\xfe\xfe\x00\xd7\xd8\xd80\x90\x96\x94\xf6\x95\x99\x92\xfe\x8c\x8f\x86\xff\xa6\xcd\xd4\xfel\x84\x88\xe2az}\xed\x9c\xd0\xda\xfe\x9e\xd2\xdc\xff\x9e\xd2\xdc\xff\xac\xd8\xe3\xff\xdb\xee\xfb\xff\xdd\xef\xfc\xff\xdd\xef\xfd\xff\xdd\xef\xfd\xff\xdd\xef\xfd\xff\xdd\xef\xfd\xff\xdd\xef\xfd\xff\xdd\xef\xfd\xff\xdd\xef\xfd\xff\xdd\xef\xfd\xff\xdd\xef\xfd\xff\xde\xef\xfd\xff\xf9\xfc\xfe\xff\xfe\xfe\xfe\xff\xfe\xfe\xfe\xff\xf9\xf9\xf9\xfflrr\xfei\x8a\x8f\xfe\x9f\xcb\xd2\xfe\x8c\x91\x88\xff\x96\x9a\x93\xfe\x85\x8d\x8b\xf5\xde\xe1\xe2/\xfe\xfe\xfe\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xfe\xfe\xfe\x00\xda\xdc\xdc.\xa5\xb1\xb8\xf4\xcb\xda\xe3\xfe\xb0\xbd\xbe\xfe\x9c\xc7\xcf\xfd\x99\xa5\xa7\x89\x80\x9e\xa4\xdb\x9d\xd0\xda\xfe\x9d\xd1\xdb\xff\x9e\xd2\xdc\xff\xa7\xd6\xe0\xff\xd8\xed\xfa\xff\xdc\xee\xfc\xff\xdd\xef\xfd\xff\xdd\xef\xfd\xff\xdd\xef\xfd\xff\xdd\xef\xfd\xff\xdd\xef\xfd\xff\xdd\xef\xfd\xff\xdd\xef\xfd\xff\xdd\xef\xfd\xff\xdd\xef\xfd\xff\xe0\xf0\xfd\xff\xfb\xfd\xfe\xff\xfe\xfe\xfe\xff\xfe\xfe\xfe\xff\xfb\xfb\xfb\xfe\x89\x95\x97\xfbd\x83\x88\xf7\x9b\xca\xd3\xfe\xac\xba\xbc\xff\xc9\xd8\xe1\xfe\x9a\xa5\xaa\xe7\xe8\xea\xea\x1f\xfe\xfe\xfe\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xfe\xfe\xfe\x00\xed\xef\xef\x16s~\x82\xe1\x82\x91\x98\xfe\x96\xab\xb5\xfev\x95\x9c\xf0\xd4\xd8\xd99atw\xd9y\xa2\xaa\xfe\x94\xc4\xce\xff\x9d\xd1\xdb\xff\xa2\xd4\xde\xff\xd4\xea\xf8\xff\xdc\xee\xfc\xff\xdd\xef\xfd\xff\xdd\xef\xfd\xff\xdd\xef\xfd\xff\xdd\xef\xfd\xff\xdd\xef\xfd\xff\xdd\xef\xfd\xff\xdd\xef\xfd\xff\xdd\xef\xfd\xff\xdd\xef\xfd\xff\xe5\xf3\xfd\xff\xfd\xfe\xfe\xff\xfe\xfe\xfe\xff\xe8\xe9\xe9\xff\xaf\xb4\xb6\xfek\x7f\x82\xc8\x83\xa8\xae\x87t\x98\x9f\xfb\x90\xa6\xaf\xfe\x80\x8e\x95\xfew\x80\x83\xc7\xf7\xf7\xf7\t\xfe\xfe\xfe\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xfe\xfe\xfe\x00\xd4\xd7\xd86\x92\xa6\xac\xf6\x9b\xbc\xc6\xfec\x90\x9d\xfd\x98\xa3\xa6\x82\xf3\xf4\xf5\x10c|\x82\xd9`\x8e\x9c\xfeTu}\xff\x9a\xcd\xd7\xff\xa0\xd2\xdd\xff\xcc\xe7\xf4\xff\xdc\xee\xfc\xff\xdc\xee\xfc\xff\xdc\xee\xfc\xff\xdc\xee\xfc\xff\xdc\xee\xfc\xff\xdc\xee\xfc\xff\xdc\xee\xfc\xff\xdc\xee\xfc\xff\xdc\xee\xfc\xff\xdd\xef\xfd\xff\xed\xf6\xfd\xff\xfe\xfe\xfe\xff\xf1\xf1\xf2\xffh\x7f\x85\xffc\x91\x9d\xfeb\x85\x8c\xc5\xb8\xd8\xdc$[w~\xd2j\x97\xa4\xfe\xa7\xc4\xcd\xfe\x89\x9b\xa0\xea\xe5\xe7\xe8!\xfe\xfe\xfe\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xfe\xfe\xfe\x00\xf6\xf7\xf7\x0b\x9a\xa3\xa5\x8d\xa1\xb9\xc1\xfd\x81\xae\xbb\xfeb\x91\x9e\xfc\xbb\xc3\xc4T\xf4\xf5\xf5\x0cf\x83\x8b\xd9k\x9f\xae\xfeU}\x88\xff\x8c\xba\xc4\xff\x9e\xd2\xdc\xff\xbc\xde\xea\xff\xca\xdb\xe8\xff\xbf\xcf\xdb\xff\xc1\xd2\xdd\xff\xc2\xd3\xde\xff\xc2\xd2\xdd\xff\xc2\xd3\xde\xff\xc2\xd3\xde\xff\xc1\xd1\xdc\xff\xc0\xd0\xdc\xff\xcf\xdf\xec\xff\xf5\xf9\xfd\xff\xfe\xfe\xfe\xff\xc9\xcb\xcc\xff^\x87\x93\xffj\x9e\xad\xfe`\x81\x88\xc2\xda\xea\xed\x0cn\x8a\x90\x93e\x97\xa5\xfd\x8d\xb6\xc1\xfe\x9a\xb0\xb7\xf8\xbf\xc3\xc4U\xfc\xfc\xfc\x03\xfe\xfe\xfe\x00\xff\xff\xff\x00\xfe\xfe\xfe\x00\xf7\xf8\xf8\t\x90\x9f\xa2\x9f\x8f\xa3\xab\xf9v\x8a\x91\xfen\xa1\xaf\xfe\\\x83\x8e\xf2\xdb\xde\xdf,\xf6\xf6\xf6\nd\x7f\x85\xcbZ\x90\x9d\xfe[\x8c\x99\xfes\x9b\xa3\xff\x9d\xd0\xda\xff}\xa5\xad\xffCel\xff_\x82\x8d\xff}\x9a\xa2\xff\x97\xaf\xb6\xff\x9d\xb3\xba\xff\x9e\xb4\xba\xff\x9c\xb1\xb8\xff\x93\xa7\xad\xff\x84\x99\x9f\xffMgm\xff\xd3\xd5\xd6\xff\xfd\xfd\xfd\xff\x91\x9a\x9c\xff[\x8e\x9b\xfeS\x88\x95\xfe]|\x82\xbd\xd8\xe9\xec\n\x87\xa5\xaaV]\x8a\x97\xf9o\xa0\xae\xfew\x88\x8f\xfe\xa3\xad\xb2\xf0\xb9\xbc\xbdj\xfb\xfb\xfb\x05\xfe\xfe\xfe\x00\xfd\xfd\xfd\x02\xb0\xb9\xbaj\x91\xb6\xbf\xf9\xd5\xea\xf7\xfe\x96\xa6\xaf\xff`\x82\x8c\xfebz\x81\xd4\xf4\xf4\xf5\x0c\xfe\xfe\xfe\x00\xcf\xd2\xd33Ehm\xce.ah\xfb=^c\xfe\x90\xc0\xc9\xfe8^d\xff:s|\xffj\x9f\xad\xffm\xa1\xb0\xffy\xa9\xb7\xff\x9b\xbf\xc9\xff\xb3\xce\xd6\xff\xb5\xcf\xd7\xff\xb5\xcf\xd7\xff\xa6\xc3\xcb\xff7lt\xffgz|\xff\xe7\xe7\xe7\xfeC\\`\xfe*^e\xfc9^d\xcc\xa6\xbf\xc38\xbb\xdd\xe3\x08\x9b\xc1\xc6XOr{\xf9^\x7f\x88\xfe\xab\xbc\xc6\xff\xdd\xee\xfb\xfe\xb6\xbf\xc4\xf5\xc7\xca\xcbS\xfe\xfe\xfe\x01\xdc\xe0\xe1.|\x9c\xa2\xe6\xba\xde\xe9\xfe\xdc\xee\xfc\xff\xd9\xeb\xf8\xff\xca\xdc\xe9\xfe\xa7\xc3\xcb\xd4\xf8\xfa\xfb\x0c\xfe\xfe\xfe\x00\xfe\xfe\xfe\x00\xe2\xe5\xe5\x1c\xa8\xb0\xb1`hux\xb1Pmr\xfd(Z`\xff7q{\xffi\x9e\xad\xffl\xa1\xb0\xffl\xa1\xb0\xffn\xa2\xb1\xff\x8b\xb4\xc0\xff\xb1\xcd\xd5\xff\xb5\xcf\xd7\xff\xa0\xbf\xc7\xff3lt\xff-X^\xffz\x80\x81\xfeOkn\xeap\x96\x9c\x8f\xba\xd3\xd6%\xb6\xda\xde\x03\x9f\xce\xd4\ro\x90\x95\xa6\x80\xa9\xb2\xfd\xbe\xd8\xe4\xfe\xda\xec\xfa\xff\xdd\xef\xfc\xff\xdf\xee\xf9\xfe\xa1\xa9\xac\xd0\xee\xf0\xf0\x13\x94\xa1\xa3\x90\x96\xc5\xcf\xfd\xcb\xe7\xf3\xff\xdc\xee\xfc\xff\xdc\xee\xfc\xff\xdc\xee\xfc\xfe\xba\xdd\xe8\xe4\xf5\xf9\xfa\x14\xfe\xfe\xfe\x00\xfe\xfe\xfe\x00\xfe\xfe\xfe\x00\xf6\xf7\xf7\n\x80\x93\x96\xb9s\x9b\xa2\xfe+X^\xff3mv\xffg\x9c\xab\xffk\xa0\xaf\xffl\xa1\xb0\xffl\xa1\xb0\xffm\xa1\xb0\xff\x8b\xb5\xc1\xff\xb3\xce\xd6\xff\x92\xb4\xbc\xff.go\xff/W]\xffy\xa1\xa9\xfel\x8b\x8f\xbe\xbb\xdc\xe0\x13\xca\xe5\xe8\x03\xb3\xda\xde\x05\xcc\xe4\xe6\no\x8e\x93\xb1\x9b\xcd\xd7\xfe\xc8\xe5\xf1\xff\xdc\xee\xfc\xff\xdd\xef\xfd\xff\xdd\xef\xfc\xfe\xce\xd9\xe0\xf9\xbe\xc4\xc5Yh\x88\x8e\xf5\x9f\xd1\xdb\xfe\xd2\xea\xf7\xff\xdc\xee\xfc\xff\xdd\xef\xfd\xff\xdc\xee\xfc\xfe\xbd\xe0\xeb\xed\xf5\xfa\xfb\x18\xfe\xfe\xfe\x00\xef\xef\xf0\x0c\xe7\xe9\xe9\x1a\xc5\xca\xcbK\x99\xb4\xbd\xf7\x9d\xcf\xd9\xfe\\\x82\x88\xff,_g\xff`\x96\xa4\xffk\xa0\xaf\xffk\xa0\xaf\xffl\xa1\xb0\xffl\xa1\xb0\xffn\xa2\xb1\xff\x9c\xbf\xca\xffv\x9e\xa6\xff*Za\xffm\x94\x9c\xff\xa1\xd2\xdc\xfe\x85\x9c\xa3\xef\x92\xb6\xbbQ\xb2\xcd\xd1\'\xbc\xd5\xd7)\xab\xd2\xd7 p\x90\x95\xbc\x9c\xcf\xd9\xfe\xc3\xe2\xef\xff\xdc\xee\xfc\xff\xdd\xef\xfd\xff\xdd\xef\xfd\xff\xe3\xf0\xfa\xfc\xe1\xe5\xe7q|\xa5\xad\xfe\xa1\xd3\xdd\xfe\xd3\xea\xf7\xff\xdc\xee\xfc\xff\xdd\xef\xfd\xff\xdc\xee\xfc\xfe\xbe\xe1\xec\xee\xf4\xf9\xfa\x1a\xd6\xde\xdf?\x92\xb3\xb9\xc1\x86\xac\xb3\xe9M\\\\\xf0\x89\x94\x99\xfe\xb9\xdd\xe8\xff\x9a\xca\xd4\xffTx\x7f\xffO|\x86\xffd\x96\xa4\xffg\x99\xa7\xffj\x9e\xad\xffj\x9e\xac\xfff\x98\xa6\xffq\x9d\xa9\xffSy\x7f\xff`\x86\x8d\xff\x9f\xcf\xd9\xff\xc1\xe0\xeb\xferz{\xfelwy\xf5\xad\xbd\xc7\xed\x98\xa8\xb0\xeb\x85\xa3\xa7\x85m\x8d\x93\xdf\x9d\xd0\xda\xfe\xbd\xe0\xec\xff\xdc\xee\xfc\xff\xdd\xef\xfd\xff\xdd\xef\xfd\xff\xe0\xf0\xfc\xfe\x9a\xa3\xa6\xf3}\xa6\xae\xfe\x9f\xd2\xdc\xff\xcd\xe8\xf4\xff\xdc\xee\xfc\xff\xdc\xee\xfc\xff\xdc\xee\xfc\xfe\xbd\xe0\xeb\xee\xe7\xed\xef+x\x94\x99\xdd\xa4\xd3\xde\xfe\xb6\xdc\xe7\xfe[pp\xffLJ@\xff\xc8\xd9\xe5\xff\xc3\xe1\xec\xff\xa4\xd0\xda\xff\x7f\xa9\xb1\xffj\x8f\x97\xffa\x84\x8b\xff`\x85\x8d\xffa\x86\x8e\xffa\x83\x8a\xffo\x94\x9c\xff\x86\xb0\xb9\xff\xa6\xd3\xdd\xff\xc5\xe1\xee\xff\xba\xc9\xd3\xffDA4\xff\x90\x9c\xa1\xfe\xdc\xee\xfc\xfe\xd8\xea\xf7\xfey\x8c\x91\xf3i\x8a\x8f\xfb\x9c\xd0\xda\xfe\xb5\xdd\xe8\xff\xdc\xee\xfc\xff\xdc\xee\xfc\xff\xdc\xee\xfc\xff\xde\xef\xfb\xfe\x93\x9b\x9f\xfc[w|\xf6\x81\xad\xb6\xfe\xa5\xc3\xcd\xff\xca\xdb\xe7\xff\xd3\xe5\xf2\xff\xd6\xe9\xf6\xfe\xb4\xda\xe4\xee\xde\xe5\xe63\x84\xaa\xb1\xee\xbc\xe0\xeb\xfe\xd3\xea\xf7\xff\x7f\xa4\xaa\xff@>0\xfe\x94\x9e\xa4\xfe\x82\x8c\x93\xfe\xbc\xce\xd9\xff\xba\xd4\xdf\xff\xc4\xe3\xef\xff\xc2\xe2\xee\xff\xc1\xe1\xec\xff\xc2\xe1\xed\xff\xc2\xe2\xee\xff\xc6\xe4\xf0\xff\xb9\xd2\xdd\xff\xb9\xcc\xd6\xff\x82\x8d\x93\xff~\x85\x88\xffAA4\xff\xa5\xc1\xca\xff\xdc\xee\xfc\xff\xdc\xee\xfc\xfe\x97\xa8\xb0\xfed\x83\x88\xfe\x99\xcc\xd6\xfe\xa6\xd2\xdd\xff\xcf\xe2\xef\xff\xca\xda\xe7\xff\xbe\xcf\xdb\xff\xb5\xc5\xcf\xfe\x8a\x91\x94\xc8\x9a\xa2\xa3p(LQ\xf74\\c\xfeSr{\xff\\x\x81\xffa{\x84\xfei\x87\x8f\xed\xb7\xc1\xc2`\x8d\xb9\xc1\xf9\xc3\xe3\xef\xfe\xd5\xeb\xf9\xff\x9f\xcf\xd9\xff[rs\xfery|\xef\xa7\xb4\xbd\xfa\x8b\x96\x9c\xfe\xa7\xb4\xbe\xfe\xdc\xee\xfc\xff\xdc\xee\xfc\xff\xdc\xee\xfc\xff\xdc\xee\xfc\xff\xdc\xee\xfc\xff\xdc\xee\xfc\xff\xa1\xae\xb7\xff\x90\x9c\xa3\xfe\x9d\xaa\xb2\xfePVV\xfeh\x86\x89\xfe\xb8\xdc\xe7\xff\xdc\xee\xfc\xff\xdc\xee\xfc\xfe\xae\xbd\xc7\xf7\x7f\x8f\x91\xb4Kou\xfc:]b\xfeTrz\xffUt~\xffVz\x85\xfeKhp\xf7\xb2\xb9\xba]\xf2\xf3\xf3\x0cZqw\xd1?`h\xfe\\\x83\x8a\xffNls\xfe?]e\xfdv\x84\x87\xa4\xb5\xbc\xbd]\x92\xc0\xc9\xfc\xc6\xe5\xf0\xff\xd9\xed\xfb\xff\xa8\xd7\xe1\xff\x97\xc9\xd3\xfe~\x8b\x8e\xad\xa2\xac\xb1\xc1\xbe\xcd\xd8\xf6\xda\xec\xfa\xfd\xd7\xe8\xf6\xfe\xba\xca\xd4\xfe\xb9\xc9\xd2\xff\xba\xca\xd3\xff\xbc\xcc\xd7\xfe\xd9\xeb\xf9\xfe\xd9\xeb\xf9\xfe\xb6\xc5\xcf\xfc\x7f\x8a\x8e\xe1Vko\xed\x9a\xcd\xd7\xfe\xbc\xdf\xeb\xff\xdc\xee\xfc\xff\xdc\xee\xfc\xfe\xb4\xc4\xce\xfb\xb5\xbe\xbfeJ_b\xcd*JP\xfeHos\xffUz\x81\xffFhr\xfeXmr\xd1\xf4\xf5\xf5\x0c\xf7\xf7\xf7\x08e~\x85\xcdR{\x86\xfeu\xa9\xb0\xffb\x86\x8c\xfeUu}\xeb\xdd\xe0\xe0(\xbd\xc3\xc4U\x92\xc1\xca\xfc\xc7\xe5\xf1\xff\xdb\xee\xfc\xff\xb2\xdb\xe6\xff\x9b\xce\xd8\xfe\x9f\xad\xb0\x88\xe7\xe8\xe9\x1e\xa4\xac\xaf\x8b\xb7\xc0\xc6\xa6\x8c\x99\xa0\xeb\x89\xad\xb4\xfe\xb9\xd3\xd8\xff\xbd\xd5\xd9\xfe\x8b\xa8\xae\xfe\x94\xa0\xa7\xeb\xa1\xac\xb2\xc8\xac\xb2\xb4z\xe2\xe5\xe5&u\x8b\x8f\xce\x9c\xd0\xda\xfe\xc0\xe2\xed\xff\xdc\xee\xfc\xff\xdc\xee\xfc\xfe\xb5\xc5\xcf\xfc\xc3\xcc\xcdS\xcc\xd1\xd2>Npy\xf6i\x97\x9d\xfen\x97\x9f\xffW\x81\x8d\xfer\x85\x8a\xb7\xfa\xfa\xfa\x05\xfb\xfb\xfb\x04\x82\x94\x98\xa2`\x8e\x9b\xfdPv\x7f\xfe3IN\xfd\x90\x9a\x9c\x84\xfb\xfb\xfb\x04\xcb\xd1\xd2E\x8a\xb5\xbd\xf8\xc2\xe2\xee\xfe\xdb\xed\xfb\xff\xc0\xe1\xed\xfe\x8f\xbc\xc4\xfa\xa9\xb3\xb5q\xfe\xfe\xfe\x00\xfc\xfd\xfd\x02\xf6\xf6\xf6\n\xb6\xbe\xbf^\x8b\xb7\xbf\xf9\xa9\xd6\xdf\xfe\xc2\xe2\xe8\xfe\x91\xb2\xb9\xf4\xcb\xd0\xd0A\xf6\xf6\xf7\x0b\xfd\xfd\xfd\x01\xfb\xfb\xfc\x04\x8a\x9a\x9d\xa2\x94\xc3\xcc\xfd\xc9\xe5\xf2\xfe\xdb\xed\xfb\xff\xdb\xed\xfb\xfe\xad\xbb\xc4\xf0\xe3\xe6\xe7&\xf3\xf4\xf4\x0fdtx\xbe;UZ\xfeTz\x84\xfe_\x8c\x98\xfa\xa1\xaa\xadr\xfe\xfe\xfe\x00\xfe\xfe\xfe\x00\xe8\xea\xeb\x1e\x95\xa2\xa5\x8cs\x8c\x92\xc2c{\x82\xd0\xb7\xc0\xc1b\xfe\xfe\xfe\x00\xef\xf0\xf0\x13[tw\xdek\x88\x8f\xfe\x87\x99\xa1\xfe\x83\x97\x9e\xfc\x95\xa2\xa4\x92\xf4\xf5\xf5\x0b\xfe\xfe\xfe\x00\xff\xff\xff\x00\xfe\xfe\xfe\x00\xf0\xf1\xf1\x11d\x83\x88\xd7`\x97\xa0\xfec\x97\xa0\xfeo\x85\x89\xc1\xf7\xf7\xf7\t\xfe\xfe\xfe\x00\xff\xff\xff\x00\xfe\xfe\xfe\x00\xe7\xea\xea\x1fy\x8e\x91\xc4\x84\x98\xa0\xfe\x85\x98\xa0\xff{\x8e\x96\xfev\x81\x85\xce\xf7\xf7\xf8\n\xfe\xfe\xfe\x01\xa8\xb1\xb3jd~\x85\xd0~\x95\x9a\xb0\x9f\xa9\xacv\xf4\xf5\xf5\x0b\xfe\xfe\xfe\x00\xfe\xfe\xfe\x00\xfe\xfe\xfe\x00\xfd\xfd\xfd\x01\xf9\xf9\xf9\x07\xf7\xf7\xf7\t\xfc\xfd\xfd\x03\xfd\xfd\xfd\x02\xbb\xc5\xc6^j\x8b\x90\xf1\x8f\xa7\xb0\xfe\x9a\xad\xb6\xfe\x98\xa3\xa8\xfb\xb4\xb7\xb7l\xfd\xfd\xfd\x01\xfe\xfe\xfe\x00\xff\xff\xff\x00\xfe\xfe\xfe\x00\xfe\xfe\xfe\x00\xa3\xac\xaee<X\\\xde=Y]\xde\xaf\xb8\xb9\\\xfe\xfe\xfe\x00\xff\xff\xff\x00\xff\xff\xff\x00\xfe\xfe\xfe\x00\xfb\xfc\xfc\x03\x91\x9e\xa1\x94z\x98\xa0\xfe\x9a\xad\xb7\xff\x9b\xac\xb4\xfe\xa3\xa8\xa9\xcc\xdd\xdf\xdf-\xfe\xfe\xfe\x00\xfc\xfc\xfc\x03\xf6\xf7\xf7\t\xfa\xfb\xfb\x05\xfe\xfe\xfe\x01\xfe\xfe\xfe\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xfe\xfe\xfe\x00\xd3\xd9\xd9;y\x9b\xa1\xec\xa4\xd3\xdd\xfe\xd7\xec\xf9\xfe\xdc\xee\xfc\xff\xe5\xf1\xfa\xfe\xab\xae\xaf\xdd\xec\xee\xee\x19\xfe\xfe\xfe\x00\xff\xff\xff\x00\xff\xff\xff\x00\xfe\xfe\xfe\x00\xfb\xfb\xfb\x04\xf1\xf2\xf2\x10\xf1\xf2\xf2\x10\xfb\xfc\xfc\x04\xfe\xfe\xfe\x00\xff\xff\xff\x00\xff\xff\xff\x00\xfe\xfe\xfe\x00\xdf\xe2\xe3\'}\xa1\xa7\xec\xbb\xdf\xea\xfe\xdc\xee\xfc\xff\xdd\xee\xfc\xfe\xe7\xf0\xf7\xfc\xb9\xbb\xbb\xb1\xeb\xec\xec\x1b\xfe\xfe\xfe\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xfe\xfe\xfe\x00\xf5\xf5\xf6\x0c\x85\x9b\x9f\xbe\x99\xcb\xd5\xfe\xb5\xdc\xe8\xfe\xdc\xee\xfc\xff\xdd\xef\xfd\xff\xe3\xf1\xfd\xfe\xe0\xe1\xe1\xfc\xc1\xc4\xc4[\xfe\xfe\xfe\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xfd\xfd\xfd\x02\xab\xb5\xb7r\x9a\xca\xd4\xf7\xc4\xe3\xef\xfe\xdc\xee\xfc\xff\xdd\xef\xfd\xff\xe1\xf1\xfd\xfe\xec\xee\xf0\xfc\xa9\xac\xad\x9f\xfa\xfa\xfa\x05\xfe\xfe\xfe\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xfe\xfe\xfe\x00\xbe\xc5\xc6V\x8b\xb7\xbf\xf8\x9e\xd2\xdc\xfe\xc5\xe3\xf0\xff\xdc\xee\xfc\xff\xdd\xef\xfd\xff\xe1\xf1\xfd\xff\xf9\xfa\xfb\xfd\xc7\xc8\xc9\x8a\xfb\xfc\xfc\x03\xfe\xfe\xfe\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xfe\xfe\xfe\x00\xf5\xf6\xf6\x0b\x82\x9e\xa3\xcf\x9e\xd1\xdb\xfe\xc9\xe5\xf2\xfe\xdc\xee\xfc\xff\xdd\xef\xfd\xff\xdd\xef\xfd\xff\xf0\xf8\xfd\xfe\xcb\xcc\xcc\xf0\xd6\xd8\xd89\xfe\xfe\xfe\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xfe\xfe\xfe\x00\xf8\xf9\xf9\x07\x80\x95\x99\xbe\x9b\xcd\xd7\xfe\xa0\xd3\xdd\xff\xd1\xe9\xf6\xff\xdc\xee\xfc\xff\xdd\xef\xfd\xff\xe0\xf0\xfd\xff\xfb\xfd\xfe\xfe\xb3\xb6\xb6\xe8\xe6\xe8\xe9\x1e\xfe\xfe\xfe\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xfe\xfe\xfe\x00\xd6\xdb\xdc4\x85\xad\xb5\xf2\x9f\xd2\xdc\xfe\xcc\xe7\xf4\xff\xdc\xee\xfc\xff\xdd\xef\xfd\xff\xdd\xef\xfd\xff\xe7\xf3\xfd\xff\xf2\xf3\xf3\xfe\xa3\xa7\xa8\xa8\xfb\xfc\xfc\x04\xfe\xfe\xfe\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xfe\xfe\xfe\x00\xe7\xe9\xea\x1e\x86\xac\xb3\xec\x9d\xd1\xdb\xfe\xa4\xd4\xdf\xff\xd6\xec\xf9\xff\xdc\xee\xfc\xff\xdc\xee\xfc\xff\xe1\xf1\xfd\xff\xfc\xfd\xfe\xff\xd2\xd2\xd2\xf2\xe2\xe3\xe3%\xfe\xfe\xfe\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xfe\xfe\xfe\x00\xb0\xb7\xb8d\x8c\xb9\xc1\xfc\x9f\xd2\xdc\xff\xcc\xe7\xf4\xff\xdc\xee\xfc\xff\xdc\xee\xfc\xff\xdc\xee\xfc\xff\xe0\xf0\xfd\xff\xfa\xfc\xfd\xfe\xad\xb0\xb1\xe4\xf0\xf1\xf1\x13\xfe\xfe\xfe\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xfe\xfe\xfe\x00\xc7\xcd\xceF\x86\xb1\xb9\xfa\x9d\xd1\xdb\xfe\xa3\xd2\xdc\xff\xb2\xc6\xd1\xff\xb0\xc3\xcd\xff\xb1\xc4\xce\xff\xb8\xc7\xd0\xff\xe5\xe7\xe7\xff\xdb\xdc\xdc\xf2\xe4\xe4\xe4%\xfe\xfe\xfe\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xfe\xfe\xfe\x00\xad\xb4\xb5e\x8e\xbc\xc5\xfd\x8c\xbb\xc4\xff\xa2\xbd\xc7\xff\xb1\xc4\xce\xff\xb0\xc3\xcd\xff\xbb\xcd\xd8\xfe\xdc\xee\xfb\xfe\xf7\xfb\xfd\xfe\xc3\xc3\xc3\xe0\xee\xef\xef\x14\xfe\xfe\xfe\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xfe\xfe\xfe\x00\xee\xef\xf0\x15\x8e\xa1\xa4\xa7\x82\xa8\xb0\xefn\x90\x96\xf6/Z`\xfd.bj\xfe.bi\xff.ah\xfeN^`\xfd\xaa\xac\xac\xeb\xe4\xe5\xe5"\xfe\xfe\xfe\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xfe\xfe\xfe\x00\xca\xd0\xd0Bv\x99\x9f\xf2/QV\xfd-ah\xfe.bj\xff.bj\xfe5Z`\xfd\xae\xbc\xc4\xe6\xc6\xcb\xce\xcf\xbf\xc1\xc2n\xfa\xfa\xfa\x04\xfe\xfe\xfe\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xfe\xfe\xfe\x00\xfe\xfe\xfe\x00\xf9\xfa\xfa\x06\xd4\xd9\xda6\x87\x91\x93\x86%OT\xf7&[b\xfe&[b\xff%X_\xfeATV\xd1\xc2\xc5\xc6N\xfa\xfb\xfb\x05\xfe\xfe\xfe\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xfe\xfe\xfe\x00\xf6\xf7\xf8\n\xaf\xb7\xb8c6PT\xe1%Za\xfe&[b\xff&[b\xfe$IN\xf6\x9a\xa0\xa1v\xe6\xe8\xe8 \xfc\xfc\xfc\x02\xfe\xfe\xfe\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xfe\xfe\xfe\x00\xce\xd2\xd369bi\xf3-`h\xfe+^f\xfe+^f\xff.ai\xfe6fn\xfb\x98\xa4\xa6|\xfe\xfe\xfe\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xfe\xfe\xfe\x01\x8c\x98\x9a\x84<lu\xfd2en\xfe.bj\xfe/ck\xfe6hq\xfeFho\xe8\xdc\xe0\xe0*\xfe\xfe\xfe\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xfe\xfe\xfe\x00\xe3\xe7\xe7"d|\x81\xc5Lip\xe6?bj\xfeBfo\xfeCem\xfbZqw\xd3\xba\xc2\xc3U\xfe\xfe\xfe\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xfe\xfe\xfe\x00\xb7\xbd\xbeU]u{\xcfKlt\xf3Fis\xfeDfn\xfdWpw\xd9z\x8b\x8f\xab\xf0\xf2\xf2\x11\xfe\xfe\xfe\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00\xff\xff\xff\x00'
        self.image = np.frombuffer(robot_image, np.uint8)
        self.image = np.reshape(self.image, (40, 40, 4))

        self.plot_handles = []

        self.grid = np.array([1,1,1,1,
                              1,0,1,2,
                              1,1,1,4])

        self.W = 4
        self.H = 3

        self.num_states = len(self.grid)

        self.R = np.ones(self.num_states)*R
        for i in range(len(self.grid)):
            if self.grid[i] > 1:
                self.R[i] = self.grid[i]-3
            elif self.grid[i] < 1:
                self.R[i] = 0

        self.num_actions = 4
        self.actions = [0,1,2,3]

        self.actions_dirs = [[0,1],
                             [1,0],
                             [0,-1],
                             [-1,0]]

        self.index_to_state_map = [(0, 0), (1, 0), (2, 0), (3, 0),
                                   (0, 1), (1, 1), (2, 1), (3, 1),
                                   (0, 2), (1, 2), (2, 2), (3, 2)]


        self.ph_table = None
        self.th = None
        self.h = []
        self.Q = dict()
        self.reset()

    def __del__(self):
        if self.fh is not None:
            plt.ioff()
            plt.show()

    def reset(self):
        self.state = 0
        return self.index_to_state_map[self.state], self.R[self.state]

    def terminal(self):
        if self.grid[self.state] != 1:
            return True
        else:
            return False

    def next_state(self,s,a):
        if self.grid[s] == 0:
            return s

        if a==0:
            #Going north
            next_state = s + self.W
        elif a==1:
            #Going east
            next_state = s + 1
        elif a==2:
            #Going south
            next_state = s - self.W
        elif a==3:
            #Goine west
            next_state = s - 1

        if next_state >= self.num_states or next_state < 0:
            next_state = s
        elif a == 1 and next_state % self.W == 0:
            next_state = s
        elif a == 3 and next_state % self.W == self.W - 1:
            next_state = s
        elif self.grid[next_state] == 0:
            next_state = s

        return next_state


    def step(self, a):
        if a<0 or a>3:
            raise Exception('Given action a=%d is out of bounds!' % a)

        r = np.random.rand()
        if a==0 or a==2:
            if r < 0.1:
                a = 1
            elif r < 0.2:
                a = 3
        elif a==1 or a==3:
            if r < 0.1:
                a = 0
            elif r < 0.2:
                a = 2

        next_state = self.next_state(self.state, a)

        self.state = next_state
        R = self.R[self.state]

        return self.index_to_state_map[self.state], R

    def drawCirc(self, ax, radius, centX, centY, angle_, theta2_, color_='black'):

        # ========Line
        arc = Arc([centX, centY], radius, radius, angle=angle_,
                  theta1=0, theta2=theta2_, capstyle='round', linestyle='-', lw=1, color=color_)
        h1 = ax.add_patch(arc)

        # ========Create the arrow head
        endX = centX + (radius / 2) * np.cos(rad(theta2_ + angle_))  # Do trig to determine end position
        endY = centY + (radius / 2) * np.sin(rad(theta2_ + angle_))

        h2=ax.add_patch(  # Create triangle as arrow head
            RegularPolygon(
                (endX, endY),  # (x,y)
                3,  # number of vertices
                radius / 9,  # radius
                rad(angle_ + theta2_),  # orientation
                color=color_
            )
        )
        #ax.set_xlim([centX - radius, centY + radius]) and ax.set_ylim([centY - radius, centY + radius])
        # Make sure you keep the axes scaled or else arrow will distort
        return [h1, h2]

    def render(self, Q=None, a=None, titleStr='',policy=False):

        # Plot bars and create text labels for the table
        if Q is not None:
            cell_text = []

            rowLabels = []
            changes = []
            for i in range(self.num_states):
                if self.grid[i] == 0:
                    continue

                s = self.index_to_state_map[i]

                rowLabels.append(str(s))

                row_text = []
                if s in Q:
                    qvalues = Q[s]
                else:
                    qvalues = np.zeros((self.num_actions))

                if isinstance(qvalues,list):
                    qvalues = np.array(qvalues)
                elif not isinstance(qvalues,np.ndarray):
                    qvalues = np.array([qvalues]*self.num_actions)

                if s in self.Q:
                    qprev = self.Q[s]
                else:
                    qprev = None

                for n in range(len(qvalues)):
                    if not policy:
                        if qprev is None:
                            if qvalues[n] != 0.0:
                                changes.append((i,n))
                        elif qprev[n] != qvalues[n]:
                            changes.append((i, n))

                    row_text.append('%.3f' % qvalues[n])

                cell_text.append(row_text)
                self.Q[s] = np.copy(qvalues)

        if self.fh is None:
            self.fh = plt.figure(figsize=(12, 4))

            self.ph_map = self.fh.add_subplot(1, 2, 2)

            for x in range(self.W + 1):
                self.ph_map.plot([x, x], [0, self.H], 'k')

            for y in range(self.H + 1):
                self.ph_map.plot([0, self.W], [y, y], 'k')

            s = 0
            for y in range(self.H):
                for x in range(self.W):
                    if self.grid[s] == 0:
                        self.ph_map.add_patch(
                            patches.Rectangle(
                                (x, y),  # (x,y)
                                1,  # width
                                1,  # height
                            )
                        )
                    else:
                        st = self.index_to_state_map[s]
                        self.ph_map.text(x+0.25, y+0.1, "s=%s" % str(st))
                    s += 1

            plt.axis('off')

            for s in range(self.num_states):
                if self.grid[s] == 2:
                    c = 'r'
                    r = 'r=-1.0'
                elif self.grid[s] == 4:
                    c = 'g'
                    r = 'r=1.0'
                elif self.grid[s] == 0:
                    continue
                else:
                   c = 'k'
                   r = 'r=%.1f' % self.R[s]

                x, y = self.index_to_state_map[s]

                self.ph_map.text(x + 0.25, y + 0.75, r,c=c)

            plt.ion()
            plt.show()

        self.ph_map.set_title(titleStr)


        if self.ph_table is None:
            self.ph_table = self.fh.add_subplot(1, 2, 1)
            self.ph_table.axis('off')

        if Q is not None:
            colLabels = ['N','E','S','W']

            if self.th is not None:
                self.th.remove()

            self.th = self.ph_table.table(cellText=cell_text,
                                rowLabels=rowLabels,
                                colLabels=colLabels,
                                loc='lower center')

            cell_dict = self.th.get_celld()
            for i in range(0,len(rowLabels)+1):
                for j in range(-1, self.num_actions):


                    if i == 0 and j==-1:
                        continue
                    cell_dict[(i, j)].set_width(0.17)
                    cell_dict[(i, j)].set_height(0.085)
                    if (i,j) in changes:
                        if i>5:
                            di = i
                        else:
                            di = i+1
                        cell_dict[(di,j)].set_color('#FF0000')
                    #else:
                    #    cell_dict[(i,j)].set_color('#FFFFFF')

        for h in self.h:
            h.remove()

        self.h = []

        if policy:
            for s in range(self.num_states):
                if self.grid[s] != 1:
                    continue

                x,y = self.index_to_state_map[s]
                a = np.argmax(Q[(x,y)])
                if a == 0:
                    dx, dy = 0, 1
                elif a == 1:
                    dx, dy = 1, 0
                elif a == 2:
                    dx, dy = 0, -1
                else:
                    dx, dy = -1, 0

                self.h.append(
                    self.ph_map.arrow(x + 0.5, y + 0.5, dx * 0.4, dy * 0.4, head_width=0.1, head_length=0.1, fc='k',
                                      ec='k'))

        else:
            x, y = self.index_to_state_map[self.state]

            if a is not None:
                if a==0:
                    dx, dy = 0,1
                elif a==1:
                    dx, dy = 1,0
                elif a==2:
                    dx, dy = 0,-1
                else:
                    dx, dy = -1,0

                self.h.append(self.ph_map.arrow(x+0.5, y+0.5, dx*0.4, dy*0.4, head_width=0.1, head_length=0.1,fc='k', ec='k'))

            if self.image is None:
                self.h.append(self.ph_map.scatter(x=x+0.5,y=y+0.5, s=80, c='r'))
            else:
                self.h.append(self.ph_map.add_artist(AnnotationBbox(OffsetImage(self.image), (x+0.5, y+0.5), frameon=False)))



        plt.pause(0.01)
        if Q is None or len(changes)==0:
            time.sleep(0.01)
        else:
            time.sleep(0.2)
